# Fetch the vendor with the builder platform to avoid QEMU issues
FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/aspnet:6.0-jammy

ENV DEBIAN_FRONTEND=noninteractive

# Install:
# - Azure Pipelines agent system requirements
# - "gzip, make, tar, unzip, wget, zip, zsh, zstd" for developer ease-of-life
RUN apt-get update -q \
    && apt-get install -y -q --no-install-recommends \
        ca-certificates \
        curl \
        git \
        git-lfs \
        gnupg \
        gzip \
        iputils-ping \
        jq \
        make \
        tar \
        unzip \
        wget \
        zip \
        zsh \
        zstd \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists

# Install Azure CLI, then verify installation
RUN curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg \
    && mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/ \
    && echo "deb [arch=$(dpkg --print-architecture)] https://packages.microsoft.com/repos/azure-cli/ $(. /etc/os-release; echo $VERSION_CODENAME) main" > /etc/apt/sources.list.d/azure-cli.list \
    && apt-get update -q \
    && apt-get install -y -q --no-install-recommends \
        azure-cli \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists \
    && az --version

WORKDIR /azp

# Install Azure Pipelines Agent sources, then verify installation
ARG AGENT_VERSION
ENV AGENT_VERSION ${AGENT_VERSION}
COPY init.sh .
RUN chmod +x init.sh \
    && ./init.sh $AGENT_VERSION \
    && AGENT_ALLOW_RUNASROOT="1" ./run-docker.sh --version

# Install Azure Pipelines Agent startup script
COPY start.sh .
RUN chmod +x start.sh

CMD ["./start.sh"]
