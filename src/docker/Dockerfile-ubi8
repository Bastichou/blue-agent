FROM registry.access.redhat.com/ubi8/ubi-minimal:8.7 as base

# Install:
# - Azure Pipelines agent system requirements
# - Azure CLI system requirements (Python 3.9, plus C/Rust build tools for libs non pre-built on this platform)
# - ASP.NET Core runtime
# - zsh, for inter-operability
# - fuse-overlayfs, iptables, shadow-utils, for BuildKit
# - gzip, make, tar, unzip, wget, yq, zip, zstd for developer ease-of-life
RUN --mount=target=/var/cache/yum,type=cache,sharing=locked \
    microdnf install -y --refresh --nodocs --setopt=install_weak_deps=0 \
        aspnetcore-runtime-6.0 \
        ca-certificates \
        cargo \
        curl \
        fuse-overlayfs \
        gcc \
        gcc-c++ \
        git-core \
        git-lfs \
        gnupg \
        gzip \
        hostname \
        iptables \
        iputils \
        jq \
        make \
        openssl-devel \
        pkg-config \
        python39 \
        shadow-utils \
        python39-devel \
        python39-pip \
        sudo \
        tar \
        unzip \
        wget \
        zip \
        zsh \
        zstd

# Copy helper script, then verify installation
COPY arch.sh .
RUN chmod +x arch.sh \
    && bash arch.sh

FROM base as rootlesskit

# Install Go, then verify installation
ARG GO_VERSION
ENV GO_VERSION ${GO_VERSION}
RUN rm -rf /usr/local/go \
    && curl -LsSf https://go.dev/dl/go${GO_VERSION}.linux-$(ARCH_X64=amd64 bash arch.sh).tar.gz | tar -xz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"
RUN go version

# Install RootlessKit, then verify installation
ARG ROOTLESSKIT_VERSION
ENV ROOTLESSKIT_VERSION ${ROOTLESSKIT_VERSION}
RUN git clone --depth 1 --branch v${ROOTLESSKIT_VERSION} https://github.com/rootless-containers/rootlesskit.git rootlesskit \
    && make --directory rootlesskit \
    && make --directory rootlesskit install \
    && rm -rf rootlesskit \
    && rootlesskit --version \
    && rootlessctl --version

FROM base

# Install Azure CLI, then verify installation
RUN python3 -m pip install --upgrade pip setuptools wheel \
    && python3 -m pip install azure-cli \
    && az --version

# Install Powershell, then verify installation
ARG POWERSHELL_VERSION
ENV POWERSHELL_VERSION ${POWERSHELL_VERSION}
RUN mkdir -p /opt/microsoft/powershell \
    && curl -LsSf https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-$(bash arch.sh).tar.gz | tar -xz -C /opt/microsoft/powershell \
    && chmod +x /opt/microsoft/powershell/pwsh \
    && ln -s /opt/microsoft/powershell/pwsh /usr/bin/pwsh \
    && pwsh -Version

# Install YQ, then verify installation
ARG YQ_VERSION
ENV YQ_VERSION ${YQ_VERSION}
RUN curl -LsSf https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_$(ARCH_X64=amd64 bash arch.sh) -o /usr/bin/yq \
    && chmod +x /usr/bin/yq \
    && yq --version

# Install Tini, then verify installation
ARG TINI_VERSION
ENV TINI_VERSION ${TINI_VERSION}
RUN curl -LsSf https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$(ARCH_X64=amd64 bash arch.sh) -o /tini \
    && chmod +x /tini \
    && /tini --version
ENTRYPOINT ["/tini", "--"]

# Install BuildKit, then verify installation
ARG BUILDKIT_VERSION
ENV BUILDKIT_VERSION ${BUILDKIT_VERSION}
RUN mkdir buildkit \
    && curl -LsSf https://github.com/moby/buildkit/releases/download/v${BUILDKIT_VERSION}/buildkit-v${BUILDKIT_VERSION}.linux-$(ARCH_X64=amd64 bash arch.sh).tar.gz | tar -xz -C buildkit \
    && mv buildkit/bin/* /usr/local/bin \
    && rm -rf buildkit \
    && buildctl --version \
    && buildkitd --version

# Install RootlessKit, then verify installation
COPY --from=rootlesskit /usr/local/bin/rootless* /usr/bin/
RUN rootlesskit --version \
    && rootlessctl --version

# Install Azure Pipelines Agent sources, then verify installation
ARG AGENT_VERSION
ENV AGENT_VERSION ${AGENT_VERSION}
ENV AGENT_HOME ${HOME}/azp
RUN mkdir -p ${AGENT_HOME} \
    && curl -LsSf https://vstsagentpackage.azureedge.net/agent/${AGENT_VERSION}/pipelines-agent-linux-$(bash arch.sh)-${AGENT_VERSION}.tar.gz | tar -xz -C ${AGENT_HOME} \
    && cd $AGENT_HOME \
    && chmod +x run-docker.sh config.sh \
    && AGENT_ALLOW_RUNASROOT="1" bash run-docker.sh --version

# Cleanup helper script
RUN rm arch.sh

# Configure local user
ENV USER root
ENV HOME /home/${USER}
RUN mkdir -p /run/${USER}/0 ${HOME}/.local/tmp ${HOME}/.local/share/buildkit \
    && chown -R ${USER} /run/${USER}/0 ${HOME} \
    && echo ${USER}:100000:65536 | tee /etc/subuid | tee /etc/subgid
USER 0:0
ENV XDG_RUNTIME_DIR=/run/${USER}/0
ENV TMPDIR=${HOME}/.local/tmp
ENV BUILDKIT_HOST=unix:///run/${USER}/0/buildkit/buildkitd.sock
VOLUME ${HOME}/.local/share/buildkit

# Install Azure Pipelines Agent startup script
COPY start.sh ${AGENT_HOME}
RUN chmod +x ${AGENT_HOME}/start.sh
CMD bash ${AGENT_HOME}/start.sh
